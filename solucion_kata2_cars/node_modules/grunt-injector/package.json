{
  "name": "grunt-injector",
  "description": "Inject references to files into other files (think scripts and stylesheets into an html file)",
  "version": "0.5.4",
  "homepage": "https://github.com/klei/grunt-injector",
  "author": {
    "name": "Joakim Bengtson",
    "email": "joakim@klei.se",
    "url": "http://joakim.beng.se"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/klei/grunt-injector.git"
  },
  "bugs": {
    "url": "https://github.com/klei/grunt-injector/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/klei/grunt-injector/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "inject",
    "stylesheets",
    "scripts",
    "index",
    "bower"
  ],
  "dependencies": {
    "wiredep": "~1.7.0",
    "lodash": "~2.4.1"
  },
  "readme": "# grunt-injector\n\n> Inject references to files into other files (think scripts and stylesheets into an html file)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-injector --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-injector');\n```\n\n## The \"injector\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `injector` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  injector: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.template\nType: `String`\nDefaulting to `dest` property of file group\n\nThe filename for the source template where you have your injection tags.\nIf not provided, the given `dest` file must exist and will be used as source template as well, and therefor will be modified on injection.\n\n#### options.templateString\nType: `String`\nDefault value: `NULL`\n\nThe contents of the template to use. If specified it overrides the `template` option.\n\n#### options.ignorePath\nType: `String`|`Array`\nDefault value: `NULL`\n\nA path or paths that should be removed from each injected file path.\n\n#### options.addRootSlash\nType: `Boolean`\nDefault value: `true`\n\nSpecifies if a root slash (`/`) should be added to all paths.\n\n#### options.destFile\nType: `String`\nDefault value: `NULL`\n\nUsed to override the `dest` property of file groups, which is necessary when using [dynamically built files objects](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically).\n\n#### options.min\nType: `Boolean`\nDefault value: `false`\n\nIf set to `true` each injected file will be switched to its minified counterpart (i.e. *.min.<ext> files), if it exists that is otherwise the original file is used as usual.\n\n#### options.starttag\nType: `String`\nDefault value: `<!-- injector:{{ext}} -->`\n\nSet the start tag that the injector is looking for. `{{ext}}` is replaced with file extension name, e.g. \"css\", \"js\" or \"html\".\nThe extension for files collected from from Bower components is prepended with option `bowerPrefix` if given.\n\n#### options.endtag\nType: `String`\nDefault value: `<!-- endinjector -->`\n\nSet the end tag that the injector is looking for. `{{ext}}` is replaced with file extension name, e.g. \"css\", \"js\" or \"html\".\nThe extension for files collected from from Bower components is prepended with option `bowerPrefix` if given.\n\n#### options.bowerPrefix\nType: `String`\nDefault value: `NULL`\n\nSet prefix for file extension when replacing `{{ext}}` in start and end tag (see above).\n**Added in v.0.5.0.** To keep old behaviour set this to \"bower:\". See *Bower dependency injection* below as well.\n\n#### options.lineEnding\nType: `String`\nDefault value: `\\n`\n\nConfigure what `lineEnding` character(s) to use between injections.\n\n#### options.transform\nType: `Function`\nParams: `filepath`, `index` (0-based file index), `length` (total number of files to inject)\nDefault value: a function that returns:\n\n* For css files: `<link rel=\"stylesheet\" href=\"<filename>.css\">`\n* For js files: `<script src=\"<filename>.js\"></script>`\n* For html files: `<link rel=\"import\" href=\"<filename>.html\">`\n\nUsed to generate the content to inject for each file.\n\n#### options.sort\nType: `Function`\nParams: `a`, `b` (is used as `compareFunction` for [Array.prototype.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort))\nDefault value: `NULL`\n\nIf set the given function is used as the compareFunction for the array sort function, to sort the source files by.\n\n**N.B.** Shouldn't be used in conjunction with a `bower.json` file as source, because [wiredep](https://github.com/stephenplusplus/wiredep), which collects Bower installed dependencies, has some intelligent sorting built in.\n\n### Usage Examples\n\n#### Injecting into html file with default options\n\nindex.html:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Example</title>\n  <!-- injector:css -->\n  <!-- endinjector -->\n</head>\n<body>\n\n  <!-- injector:js -->\n  <!-- endinjector -->\n</body>\n</html>\n```\nGruntfile.js:\n\n```js\ngrunt.initConfig({\n  injector: {\n    options: {},\n    local_dependencies: {\n      files: {\n        'index.html': ['**/*.js', '**/*.css'],\n      }\n    }\n  }\n})\n```\n\n**After injection**\n\nindex.html:\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Example</title>\n  <!-- injector:css -->\n  <link rel=\"stylesheet\" href=\"file1.css\">\n  <link rel=\"stylesheet\" href=\"file2.css\">\n  <!-- endinjector -->\n</head>\n<body>\n\n  <!-- injector:js -->\n  <script src=\"file1.js\"></script>\n  <script src=\"file2.js\"></script>\n  <!-- endinjector -->\n</body>\n</html>\n```\n\n#### Bower dependency injection\n\nThe `grunt-injector` can be used to inject your installed Bower Components as well.\nTo do this the module [wiredep](https://github.com/stephenplusplus/wiredep) is used, and here's how the configuration can look like in that case:\n\n**N.B** From version **0.5.0** the `{{ext}}` in the starttag is not prefixed with `bower:` by default anymore! To keep the old behaviour set the `bowerPrefix` to \"bower:\".\n\nGruntfile.js:\n\n```js\ngrunt.initConfig({\n  injector: {\n    options: {},\n    bower_dependencies: {\n      files: {\n        'index.html': ['bower.json'],\n      }\n    }\n  }\n})\n```\n\nindex.html:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Example</title>\n  <!-- injector:css -->\n  <!-- endinjector -->\n</head>\n<body>\n\n  <!-- injector:js -->\n  <!-- endinjector -->\n</body>\n</html>\n```\n\n#### Other configurations\nFor more advanced task configurations see the `Gruntfile.js` in this repository and have a look at the tests in `test/injector_test.js`.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n**0.5.4** - 2014-07-22 - Now able to handle overrides in `bower.json` ([#11](https://github.com/klei/grunt-injector/pull/11))\n\n**0.5.3** - 2014-07-16\n\n- Fixing `addRootSlash=false` problem with `ignorePath` [#10](https://github.com/klei/grunt-injector/issues/10)\n- Adding `lineEnding` option [#8](https://github.com/klei/grunt-injector/pull/8)\n- Clearing content before injection [#3](https://github.com/klei/grunt-injector/pull/3)\n- Allow multiple uses of `{{ext}}` in tags [#5](https://github.com/klei/grunt-injector/pull/5)\n\n**0.5.2** - 2014-03-05 - Getting bower components directory from `.bowerrc` file if it exists (Fixes: [#2](https://github.com/klei/grunt-injector/issues/2))\n\n**0.5.1** - 2014-02-21 - Adding `addRootSlash` option (Fixes: [#1](https://github.com/klei/grunt-injector/issues/1))\n\n**0.5.0** - 2013-12-29 - Removing the default `bower:` prefix for Bower injections (see *Bower dependency injection* above)\n\n**0.4.1** - 2013-12-23 - Fixing `index` and `length` params for `transform` function\n\n**0.4.0** - 2013-12-23 - Adding `templateString` option\n\n**0.3.1** - 2013-12-15 - Fixing possibility to provide ignorePath as array\n\n**0.3.0** - 2013-12-10 - Adding `sort` option to be able to sort files. Also rewriting for performance which removes unnecessary injections for dynamic file objects\n\n**0.2.0** - 2013-11-20 - Don't write to destination file if it hasn't been changed by the injector (useful to not trigger any unnecessary watch tasks if applicable)\n\n**0.1.2** - 2013-11-17 - Making it possible to only provide destFile and not template\n\n**0.1.1** - 2013-11-17 - ignorePath now only removes from start of path\n\n**0.1.0** - 2013-11-17 - First release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-injector@0.5.4",
  "_shasum": "6bed57a41a1cf04121144d46ec750c88a780bff7",
  "_from": "grunt-injector@0.5.4",
  "_resolved": "https://registry.npmjs.org/grunt-injector/-/grunt-injector-0.5.4.tgz"
}
